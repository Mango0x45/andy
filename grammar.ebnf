program = {cmdlist | funcdef};
cmdlist = pipeline, {lop, pipeline}, end;
pipeline = cmd, {'|', cmd};
cmd = (simple | compound | if | while | for), {redir};

funcdef = 'func', value, {value}, '{', program, '}';

simple = value, {value};
compound = '{', program, '}';
if = 'if', cmdlist, '{', program, '}', [else];
else = 'else', ('{', program, '}' | if);
while = 'while', cmdlist, '{', program, '}';
for = 'for', [ident, 'in'], {value}, '{', program, '}';

redir =
	( '<'
	| '>'
	| '>!'
	| '>>'
	), value;
value = arg | string | list | procsub, varref;

procsub = ('`{', '<{' | '>{' | '<>{'), program, '}'
        | '`', (* non-closing, -eof, or -end tokens *);

arg = (* One of more non-whitespace and -metachar characters unless backslash
         escaped *);

string = sstring | dstring;
sstring = (* /('+).+?\g1/ *);
dstring = (* C-style string allowing escape sequences and variables *);

ident = (* one or more alphanumeric characters, underscores, or prime symbols; a
           prime can be a unicode single-, double-, triple-, or quadruple-prime.
         *);
varref = '$', (ident | '(', ident, ')'), [index];
index = '[', {value}, ']';

list = '(', {value}, ')';

lop = '&&' | '||';
end = ';' | '\n';
